{"ast":null,"code":"/* eslint-disable no-console */\nimport axios from 'axios';\nimport constants from '../types'; // - ================ FETCH ALL POSTS ================\n\nexport const getAllPosts = () => dispatch => {\n  dispatch({\n    type: constants.TOGGLE_LOADING,\n    payload: true\n  });\n  axios.get('/posts').then(res => {\n    dispatch({\n      type: constants.GET_ALL_POSTS,\n      payload: res.data.posts\n    });\n    dispatch({\n      type: constants.TOGGLE_LOADING,\n      payload: false\n    });\n  }).catch(err => {\n    dispatch({\n      type: constants.TOGGLE_LOADING,\n      payload: false\n    });\n    console.log(err);\n    dispatch({\n      type: constants.ADD_ERROR,\n      payload: Object.values(err.response.data)\n    });\n  });\n}; // - ================ DELETE POST ================\n\nexport const deletePost = userInfo => dispatch => {\n  const username = userInfo.username,\n        id = userInfo.id;\n  axios.delete(\"/\".concat(username, \"/delete/\").concat(id)).then(res => {\n    dispatch({\n      type: constants.REFRESH\n    });\n  }).catch(err => {\n    dispatch({\n      type: constants.ADD_ERROR,\n      payload: Object.values(err.response.data)\n    });\n  });\n}; // - ================ Like POST ================\n\nexport const likePost = userInfo => dispatch => {\n  const username = userInfo.username,\n        recipient = userInfo.recipient,\n        id = userInfo.id;\n  axios.post(\"/\".concat(username, \"/like-status/\").concat(id), {\n    recipient\n  }).then(res => {\n    dispatch({\n      type: constants.REFRESH\n    });\n  }).catch(err => console.log(err));\n}; // - ================ CREATE NEW POST ================\n\nexport const createPost = userInfo => dispatch => {\n  const username = userInfo.username,\n        body = userInfo.body;\n  axios.post(\"/\".concat(username, \"/create-post\"), {\n    body\n  }).then(res => {\n    dispatch({\n      type: constants.REFRESH\n    });\n    dispatch({\n      type: constants.MODAL_STATUS,\n      payload: {\n        modalActive: false,\n        modalContent: ''\n      }\n    });\n  }).catch(err => console.log(err));\n}; // - ================ Modal Display ================\n\nexport const displayModal = displayType => dispatch => {\n  if (displayType.post) {\n    axios.get(\"/get-comments/\".concat(displayType.post._id)).then(res => {\n      dispatch({\n        type: constants.FETCH_COMMENTS,\n        payload: {\n          postId: res.data.postId,\n          modalPostComments: res.data.allComments\n        }\n      });\n    }).catch(err => console.log(err));\n  }\n\n  dispatch({\n    type: constants.MODAL_STATUS,\n    payload: {\n      modalActive: displayType.active,\n      modalContent: displayType.modalContent\n    }\n  });\n}; // - ================ CREATE NEW Comment ================\n\nexport const createComment = userInfo => dispatch => {\n  const username = userInfo.username,\n        postId = userInfo.postId,\n        body = userInfo.body;\n  axios.post(\"/\".concat(username, \"/add-comment/\").concat(postId), {\n    body,\n    username,\n    postId\n  }).then(res => {\n    // - replace with commetn refresh\n    axios.get(\"/get-comments/\".concat(postId)).then(res => {\n      dispatch({\n        type: constants.FETCH_COMMENTS,\n        payload: {\n          postId: res.data.postId,\n          modalPostComments: res.data.allComments\n        }\n      });\n    }).catch(err => console.log(err));\n    dispatch({\n      type: constants.REFRESH\n    });\n  }).catch(err => console.log(err));\n}; // - =========== CLEAR ALL ERRORS ===================\n\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: constants.CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["/Users/matt/projects/ship-crew/dist/client/src/redux/actions/dataActions.js"],"names":["axios","constants","getAllPosts","dispatch","type","TOGGLE_LOADING","payload","get","then","res","GET_ALL_POSTS","data","posts","catch","err","console","log","ADD_ERROR","Object","values","response","deletePost","userInfo","username","id","delete","REFRESH","likePost","recipient","post","createPost","body","MODAL_STATUS","modalActive","modalContent","displayModal","displayType","_id","FETCH_COMMENTS","postId","modalPostComments","allComments","active","createComment","clearErrors","CLEAR_ERRORS"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,UAAtB,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAMC,QAAQ,IAAI;AAC3CA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEH,SAAS,CAACI,cAAlB;AAAkCC,IAAAA,OAAO,EAAE;AAA3C,GAAD,CAAR;AACAN,EAAAA,KAAK,CACFO,GADH,CACO,QADP,EAEGC,IAFH,CAEQC,GAAG,IAAI;AACXN,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEH,SAAS,CAACS,aADT;AAEPJ,MAAAA,OAAO,EAAEG,GAAG,CAACE,IAAJ,CAASC;AAFX,KAAD,CAAR;AAIAT,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEH,SAAS,CAACI,cAAlB;AAAkCC,MAAAA,OAAO,EAAE;AAA3C,KAAD,CAAR;AACD,GARH,EASGO,KATH,CASSC,GAAG,IAAI;AACZX,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEH,SAAS,CAACI,cAAlB;AAAkCC,MAAAA,OAAO,EAAE;AAA3C,KAAD,CAAR;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEH,SAAS,CAACgB,SADT;AAEPX,MAAAA,OAAO,EAAEY,MAAM,CAACC,MAAP,CAAcL,GAAG,CAACM,QAAJ,CAAaT,IAA3B;AAFF,KAAD,CAAR;AAID,GAhBH;AAiBD,CAnBM,C,CAqBP;;AACA,OAAO,MAAMU,UAAU,GAAGC,QAAQ,IAAInB,QAAQ,IAAI;AAAA,QACxCoB,QADwC,GACvBD,QADuB,CACxCC,QADwC;AAAA,QAC9BC,EAD8B,GACvBF,QADuB,CAC9BE,EAD8B;AAEhDxB,EAAAA,KAAK,CACFyB,MADH,YACcF,QADd,qBACiCC,EADjC,GAEGhB,IAFH,CAEQC,GAAG,IAAI;AACXN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEH,SAAS,CAACyB;AAAlB,KAAD,CAAR;AACD,GAJH,EAKGb,KALH,CAKSC,GAAG,IAAI;AACZX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEH,SAAS,CAACgB,SADT;AAEPX,MAAAA,OAAO,EAAEY,MAAM,CAACC,MAAP,CAAcL,GAAG,CAACM,QAAJ,CAAaT,IAA3B;AAFF,KAAD,CAAR;AAID,GAVH;AAWD,CAbM,C,CAeP;;AACA,OAAO,MAAMgB,QAAQ,GAAGL,QAAQ,IAAInB,QAAQ,IAAI;AAAA,QACtCoB,QADsC,GACVD,QADU,CACtCC,QADsC;AAAA,QAC5BK,SAD4B,GACVN,QADU,CAC5BM,SAD4B;AAAA,QACjBJ,EADiB,GACVF,QADU,CACjBE,EADiB;AAE9CxB,EAAAA,KAAK,CACF6B,IADH,YACYN,QADZ,0BACoCC,EADpC,GAC0C;AACtCI,IAAAA;AADsC,GAD1C,EAIGpB,IAJH,CAIQC,GAAG,IAAI;AACXN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEH,SAAS,CAACyB;AAAlB,KAAD,CAAR;AACD,GANH,EAOGb,KAPH,CAOSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAPhB;AAQD,CAVM,C,CAYP;;AACA,OAAO,MAAMgB,UAAU,GAAGR,QAAQ,IAAInB,QAAQ,IAAI;AAAA,QACxCoB,QADwC,GACrBD,QADqB,CACxCC,QADwC;AAAA,QAC9BQ,IAD8B,GACrBT,QADqB,CAC9BS,IAD8B;AAEhD/B,EAAAA,KAAK,CACF6B,IADH,YACYN,QADZ,mBACoC;AAAEQ,IAAAA;AAAF,GADpC,EAEGvB,IAFH,CAEQC,GAAG,IAAI;AACXN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEH,SAAS,CAACyB;AAAlB,KAAD,CAAR;AACAvB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEH,SAAS,CAAC+B,YADT;AAEP1B,MAAAA,OAAO,EAAE;AACP2B,QAAAA,WAAW,EAAE,KADN;AAEPC,QAAAA,YAAY,EAAE;AAFP;AAFF,KAAD,CAAR;AAOD,GAXH,EAYGrB,KAZH,CAYSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAZhB;AAaD,CAfM,C,CAiBP;;AACA,OAAO,MAAMqB,YAAY,GAAGC,WAAW,IAAIjC,QAAQ,IAAI;AACrD,MAAIiC,WAAW,CAACP,IAAhB,EAAsB;AACpB7B,IAAAA,KAAK,CACFO,GADH,yBACwB6B,WAAW,CAACP,IAAZ,CAAiBQ,GADzC,GAEG7B,IAFH,CAEQC,GAAG,IAAI;AACXN,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEH,SAAS,CAACqC,cADT;AAEPhC,QAAAA,OAAO,EAAE;AACPiC,UAAAA,MAAM,EAAE9B,GAAG,CAACE,IAAJ,CAAS4B,MADV;AAEPC,UAAAA,iBAAiB,EAAE/B,GAAG,CAACE,IAAJ,CAAS8B;AAFrB;AAFF,OAAD,CAAR;AAOD,KAVH,EAWG5B,KAXH,CAWSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXhB;AAYD;;AAEDX,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEH,SAAS,CAAC+B,YADT;AAEP1B,IAAAA,OAAO,EAAE;AACP2B,MAAAA,WAAW,EAAEG,WAAW,CAACM,MADlB;AAEPR,MAAAA,YAAY,EAAEE,WAAW,CAACF;AAFnB;AAFF,GAAD,CAAR;AAOD,CAvBM,C,CAyBP;;AACA,OAAO,MAAMS,aAAa,GAAGrB,QAAQ,IAAInB,QAAQ,IAAI;AAAA,QAC3CoB,QAD2C,GAChBD,QADgB,CAC3CC,QAD2C;AAAA,QACjCgB,MADiC,GAChBjB,QADgB,CACjCiB,MADiC;AAAA,QACzBR,IADyB,GAChBT,QADgB,CACzBS,IADyB;AAEnD/B,EAAAA,KAAK,CACF6B,IADH,YACYN,QADZ,0BACoCgB,MADpC,GAC8C;AAC1CR,IAAAA,IAD0C;AAE1CR,IAAAA,QAF0C;AAG1CgB,IAAAA;AAH0C,GAD9C,EAMG/B,IANH,CAMQC,GAAG,IAAI;AACX;AACAT,IAAAA,KAAK,CACFO,GADH,yBACwBgC,MADxB,GAEG/B,IAFH,CAEQC,GAAG,IAAI;AACXN,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEH,SAAS,CAACqC,cADT;AAEPhC,QAAAA,OAAO,EAAE;AACPiC,UAAAA,MAAM,EAAE9B,GAAG,CAACE,IAAJ,CAAS4B,MADV;AAEPC,UAAAA,iBAAiB,EAAE/B,GAAG,CAACE,IAAJ,CAAS8B;AAFrB;AAFF,OAAD,CAAR;AAOD,KAVH,EAWG5B,KAXH,CAWSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXhB;AAaAX,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEH,SAAS,CAACyB;AAAlB,KAAD,CAAR;AACD,GAtBH,EAuBGb,KAvBH,CAuBSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAvBhB;AAwBD,CA1BM,C,CA4BP;;AACA,OAAO,MAAM8B,WAAW,GAAG,MAAMzC,QAAQ,IAAI;AAC3CA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEH,SAAS,CAAC4C;AADT,GAAD,CAAR;AAGD,CAJM","sourcesContent":["/* eslint-disable no-console */\nimport axios from 'axios';\n\nimport constants from '../types';\n\n// - ================ FETCH ALL POSTS ================\nexport const getAllPosts = () => dispatch => {\n  dispatch({ type: constants.TOGGLE_LOADING, payload: true });\n  axios\n    .get('/posts')\n    .then(res => {\n      dispatch({\n        type: constants.GET_ALL_POSTS,\n        payload: res.data.posts\n      });\n      dispatch({ type: constants.TOGGLE_LOADING, payload: false });\n    })\n    .catch(err => {\n      dispatch({ type: constants.TOGGLE_LOADING, payload: false });\n      console.log(err);\n      dispatch({\n        type: constants.ADD_ERROR,\n        payload: Object.values(err.response.data)\n      });\n    });\n};\n\n// - ================ DELETE POST ================\nexport const deletePost = userInfo => dispatch => {\n  const { username, id } = userInfo;\n  axios\n    .delete(`/${username}/delete/${id}`)\n    .then(res => {\n      dispatch({ type: constants.REFRESH });\n    })\n    .catch(err => {\n      dispatch({\n        type: constants.ADD_ERROR,\n        payload: Object.values(err.response.data)\n      });\n    });\n};\n\n// - ================ Like POST ================\nexport const likePost = userInfo => dispatch => {\n  const { username, recipient, id } = userInfo;\n  axios\n    .post(`/${username}/like-status/${id}`, {\n      recipient\n    })\n    .then(res => {\n      dispatch({ type: constants.REFRESH });\n    })\n    .catch(err => console.log(err));\n};\n\n// - ================ CREATE NEW POST ================\nexport const createPost = userInfo => dispatch => {\n  const { username, body } = userInfo;\n  axios\n    .post(`/${username}/create-post`, { body })\n    .then(res => {\n      dispatch({ type: constants.REFRESH });\n      dispatch({\n        type: constants.MODAL_STATUS,\n        payload: {\n          modalActive: false,\n          modalContent: ''\n        }\n      });\n    })\n    .catch(err => console.log(err));\n};\n\n// - ================ Modal Display ================\nexport const displayModal = displayType => dispatch => {\n  if (displayType.post) {\n    axios\n      .get(`/get-comments/${displayType.post._id}`)\n      .then(res => {\n        dispatch({\n          type: constants.FETCH_COMMENTS,\n          payload: {\n            postId: res.data.postId,\n            modalPostComments: res.data.allComments\n          }\n        });\n      })\n      .catch(err => console.log(err));\n  }\n\n  dispatch({\n    type: constants.MODAL_STATUS,\n    payload: {\n      modalActive: displayType.active,\n      modalContent: displayType.modalContent\n    }\n  });\n};\n\n// - ================ CREATE NEW Comment ================\nexport const createComment = userInfo => dispatch => {\n  const { username, postId, body } = userInfo;\n  axios\n    .post(`/${username}/add-comment/${postId}`, {\n      body,\n      username,\n      postId\n    })\n    .then(res => {\n      // - replace with commetn refresh\n      axios\n        .get(`/get-comments/${postId}`)\n        .then(res => {\n          dispatch({\n            type: constants.FETCH_COMMENTS,\n            payload: {\n              postId: res.data.postId,\n              modalPostComments: res.data.allComments\n            }\n          });\n        })\n        .catch(err => console.log(err));\n\n      dispatch({ type: constants.REFRESH });\n    })\n    .catch(err => console.log(err));\n};\n\n// - =========== CLEAR ALL ERRORS ===================\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: constants.CLEAR_ERRORS\n  });\n};\n"]},"metadata":{},"sourceType":"module"}